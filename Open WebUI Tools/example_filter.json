[
    {
        "id": "example_filter",
        "user_id": "06dbe545-cdc6-43ea-bec6-16d732ad95d7",
        "name": "Example Filter",
        "type": "filter",
        "content": "\"\"\"\ntitle: OpenWebUI Advanced Filter\nauthor: Wes Caldwell\nemail: musicheardworldwide@gmail.com\nauthor_url: https://github.com/musicheardworldwide\nversion: 1.0.0\nlicense: MIT\ndescription: A structured Open WebUI filter with advanced text sanitization, JSON enforcement, and error handling.\nrequirements:\n\"\"\"\n\nimport json\nimport logging\nimport traceback\nfrom typing import Optional, Dict, Any\nfrom pydantic import BaseModel, Field\nfrom fastapi import Request\n\n# Configure Logging\nlogger = logging.getLogger(__name__)\nif not logger.handlers:\n    handler = logging.StreamHandler()\n    handler.setFormatter(logging.Formatter(\"%(asctime)s - %(levelname)s - %(message)s\"))\n    logger.addHandler(handler)\nlogger.setLevel(logging.INFO)\n\n\n# Centralized Error Handling Function\ndef handle_error(exception: Exception, function_name: str, inputs: dict) -> dict:\n    \"\"\"\n    Handles errors and returns a structured response for OpenWebUI.\n\n    Args:\n        exception (Exception): The caught exception.\n        function_name (str): The name of the function where the error occurred.\n        inputs (dict): The original function inputs for debugging.\n\n    Returns:\n        dict: A structured error message to pass to OpenWebUI.\n    \"\"\"\n    error_message = str(exception)\n    stack_trace = traceback.format_exc()\n    logger.error(f\"Error in {function_name}: {error_message}\")\n    logger.debug(f\"Stack Trace:\\n{stack_trace}\")\n\n    return {\n        \"error\": True,\n        \"function\": function_name,\n        \"message\": error_message,\n        \"stack_trace\": stack_trace,\n        \"inputs\": inputs,\n        \"suggestion\": \"Check input values and ensure the correct filter configurations.\",\n    }\n\n\n# Filter Definition\nclass Filter:\n    \"\"\"\n    OpenWebUI Filter for modifying input and output data dynamically.\n    \"\"\"\n\n    class Config(BaseModel):\n        ENABLE_TEXT_SANITIZATION: bool = Field(\n            default=True, description=\"Enable text sanitization for user inputs.\"\n        )\n        REMOVE_PROFANITY: bool = Field(\n            default=True, description=\"Filter explicit content from AI responses.\"\n        )\n        ENFORCE_JSON_OUTPUT: bool = Field(\n            default=False, description=\"Ensure output responses conform to JSON format.\"\n        )\n\n    def __init__(self):\n        self.config = self.Config()\n\n    def inlet(self, body: Dict, __user__: Optional[Dict] = None) -> Dict:\n        \"\"\"\n        Modifies input data before it reaches the AI model.\n\n        Args:\n            body (Dict): The request payload.\n            __user__ (Optional[Dict]): User metadata.\n\n        Returns:\n            Dict: Modified request payload.\n        \"\"\"\n        try:\n            logger.info(\"Filtering input data...\")\n            messages = body.get(\"messages\", [])\n\n            if messages:\n                user_message = messages[-1][\"content\"]\n\n                # Perform text sanitization\n                if self.config.ENABLE_TEXT_SANITIZATION:\n                    user_message = self.sanitize_text(user_message)\n\n                body[\"messages\"][-1][\"content\"] = user_message\n\n            return body\n\n        except Exception as e:\n            return handle_error(e, \"inlet\", body)\n\n    def outlet(self, body: Dict, __user__: Optional[Dict] = None) -> Dict:\n        \"\"\"\n        Modifies AI-generated responses before sending them to the user.\n\n        Args:\n            body (Dict): The response payload.\n            __user__ (Optional[Dict]): User metadata.\n\n        Returns:\n            Dict: Modified response payload.\n        \"\"\"\n        try:\n            logger.info(\"Filtering output data...\")\n            for message in body.get(\"messages\", []):\n                message_content = message[\"content\"]\n\n                # Remove explicit words if enabled\n                if self.config.REMOVE_PROFANITY:\n                    message_content = self.remove_profanity(message_content)\n\n                # Enforce JSON format if required\n                if self.config.ENFORCE_JSON_OUTPUT:\n                    message_content = self.ensure_json_format(message_content)\n\n                message[\"content\"] = message_content\n\n            return body\n\n        except Exception as e:\n            return handle_error(e, \"outlet\", body)\n\n    def sanitize_text(self, text: str) -> str:\n        \"\"\"\n        Basic text sanitization function.\n\n        Args:\n            text (str): The input text.\n\n        Returns:\n            str: Sanitized text.\n        \"\"\"\n        text = text.replace(\"badword\", \"***\")  # Example censorship\n        return text\n\n    def remove_profanity(self, text: str) -> str:\n        \"\"\"\n        Censors explicit words from responses.\n\n        Args:\n            text (str): The output text.\n\n        Returns:\n            str: Cleaned text.\n        \"\"\"\n        profanity_list = [\n            \"damn\",\n            \"hell\",\n            \"curseword1\",\n            \"curseword2\",\n        ]  # Example profanity list\n        for word in profanity_list:\n            text = text.replace(word, \"***\")\n        return text\n\n    def ensure_json_format(self, text: str) -> str:\n        \"\"\"\n        Ensures the output is structured as JSON.\n\n        Args:\n            text (str): The output text.\n\n        Returns:\n            str: JSON-compliant string.\n        \"\"\"\n        return json.dumps({\"response\": text})\n\n\n# Example Usage\nif __name__ == \"__main__\":\n    filter_obj = Filter()\n\n    # Simulate an OpenWebUI message\n    test_input = {\n        \"messages\": [{\"role\": \"user\", \"content\": \"Hello! This is a badword test.\"}]\n    }\n\n    # Process Input Filtering\n    filtered_input = filter_obj.inlet(test_input)\n    print(\"Filtered Input:\", json.dumps(filtered_input, indent=4))\n\n    # Simulate AI-generated output\n    test_output = {\n        \"messages\": [{\"role\": \"assistant\", \"content\": \"This is a damn great response.\"}]\n    }\n\n    # Process Output Filtering\n    filtered_output = filter_obj.outlet(test_output)\n    print(\"Filtered Output:\", json.dumps(filtered_output, indent=4))\n",
        "meta": {
            "description": "a filter function example template",
            "manifest": {
                "title": "OpenWebUI Advanced Filter",
                "author": "Wes Caldwell",
                "email": "musicheardworldwide@gmail.com",
                "author_url": "https://github.com/musicheardworldwide",
                "version": "1.0.0",
                "license": "MIT",
                "description": "A structured Open WebUI filter with advanced text sanitization, JSON enforcement, and error handling.",
                "requirements": ""
            }
        },
        "is_active": false,
        "is_global": false,
        "updated_at": 1741783085,
        "created_at": 1741783085
    }
]